//
// CrabFall.snt
//
// A relatively simple game demonstrating
// the use of the grid, sprites and key input
// in Stroyent.
//

include <Print>;
include <Grid>;
include <Sprites>;

image crabTiles  "crab.png",      32, 32;
image floorTiles "platforms.png", 16, 16;
image gridTiles  "grid.png",       8,  8;

var background := {
	 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1,
	 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1,
	 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1,
	 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 92, -1,
	 91, 91, 91, 91, 91, 91, 91, 92, 95, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 97, 97,103, 91, 91, 91, 91, 91, 91, 91, 92, 93, 94, 93, 93, -1,
	103, 96, 98, 91, 91, 91, 92, 93, 93, 94, 95, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 99,104,104,104, 91, 97, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1,
	104,104,104, 98, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,104,104,104,104, 91,104,104,101, 91, 91, 91, 91, 91, 91, 91, 91, -1,
	104,104,104,104, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,102,104,104,104,104, 96,104,104,104, 91, 91, 91, 91, 91, 91, 91, 91, -1,
	104,104,104,107, 91,102, 98, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,104,104,104,104,104,104,104,104,104,103, 98,104, 97, 91, 91, 91, 91, -1,
	104,104,104,104, 91,104,108, 91, 91, 91,103, 97, 96, 91, 91, 91, 91, 91, 91, 91, 91, 92, 94,104,104,104,104,104,104,104,104,104,104,104,104,104, 91, 91, 91, 91, -1,
	104,104,104,104, 99,104,104, 91, 91, 91,109,104,104, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,106,104,104,104,104,104,104,104,104,104,104,104,105, 91, 91, 91, 91, -1,
	104,104,104,104,104,104,104,101, 99,102,104,104,107, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,104,104,104,104,104,105,104,105,104,105,104, 62, 93, 93, 95, 91, 91, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,109,104,104,104,104,104,104,104,104,104,104,104,105, 91, 91, 91, 91, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,105, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91,104,104,104,104,104,104,104,105,104,105,104,104,104, 91, 96, 91, 99, -1,
	104,104,104,105,104,104,105,104,104,105,104,104,104, 91, 91, 91,103, 96, 96,103, 91, 91, 91,104,104,104,104,104,104,104,104,104,104,104,104,104, 91,104, 97,104, -1,
	104,104,104,104,104,104,104,104, 62, 93, 94, 63,106, 91, 91, 91,109,104,104,104, 91, 91, 91, 99,104,104,104,110,110,104,104,104,104,104,104,104, 91,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104, 91, 91, 91,104,104,105,106, 91, 91, 91,104,104,104,104,110,110,104,104,104,104,104,104,106, 91,111,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104, 99, 98, 91,111,104,104,105, 91, 91, 96,104,104,104,104,110,110,104,104,104,104,104,104,104, 98,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, 91,104,104,105,104, 98, 98,104,104,104,104,104,110,110,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, 91,110,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,106,101,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104, -1,
	 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

const CRAB 128;
var score     := 1;
var alive     := false;
var walkTimer := 0;
var crabSpeed := 0;

const LAYER_START  10;
const LAYER_SIZE   20;
const LAYER_COUNT   4;
const HOLE_RIGHT   24;
const HOLE_LEFT    28;
var layerTiles := {9, 10, 10, 10, 11, 16, 17, 18, 19};

func randOf(source, length) {
	return *(source + rand(length));
}

func buildLayer(layer, y) {
	var baseSprite := (layer * LAYER_SIZE) + LAYER_START;
	var hole := rand(16);
	for(var x := 0; x < 20; x += 1;) {
		if ((x < hole) | (x > hole + 3)) {
			var tile := randOf(&layerTiles, 9) + 16;
			if ((x + 1) = hole) { tile := HOLE_LEFT  ; }
			if ((x - 4) = hole) { tile := HOLE_RIGHT ; }
			spriteInit(
				x + baseSprite,
				S16x16,
				tile,
				x * 16,
				y
			);
		}
		else {
			spriteShow(x + baseSprite, false);
		}
	}
}

func crabLogic() {
	var supported    := false;
	var crabX := getSprite(CRAB).sprite.x;
	var crabY := getSprite(CRAB).sprite.y;
	for(var layer := 0; layer < LAYER_COUNT; layer += 1;) {
		for(var x := 0; x < LAYER_SIZE; x += 1;) {
			var index := x + LAYER_START + (LAYER_SIZE * layer);
			if (getSprite(index).sprite.status & 1) {
				supported |= spriteCollide(crabX + 31, crabY + 32, index);
				supported |= spriteCollide(crabX + 23, crabY + 32, index);
				supported |= spriteCollide(crabX + 7,  crabY + 32, index);
				supported |= spriteCollide(crabX,      crabY + 32, index);
			}
		}
	}
	if (supported) {
		crabSpeed := 4;
		getSprite(CRAB).sprite.y -= 1;
		getSprite(CRAB).sprite.tile := 0;
	}
	else {
		crabSpeed := 3;
		getSprite(CRAB).sprite.y += 2;
	}
	if (keys() & KEY_LF) {
		getSprite(CRAB).sprite.tile := (walkTimer / 4) % 2;
		getSprite(CRAB).sprite.x -= crabSpeed;
		if (getSprite(CRAB).sprite.x < 0) { getSprite(CRAB).sprite.x := 0; }
	}
	if (keys() & KEY_RT) {
		getSprite(CRAB).sprite.tile := (walkTimer / 4) % 2;
		getSprite(CRAB).sprite.x    += crabSpeed;
		if (getSprite(CRAB).sprite.x > 320-32) { getSprite(CRAB).sprite.x := 320-32; }
	}
	if (supported) { if (keys()) { score += 1; } }
	else           { getSprite(CRAB).sprite.tile := 2; }
	if (keys()) { walkTimer += 1; }
	else        { walkTimer := 0; }

	crabY := getSprite(CRAB).sprite.y;
	if ((crabY < -16) | (crabY > 240 - 16)) {
		gridPrint(1, 1, "GAME OVER!");
		alive := false;
	}
}

func levelLogic() {
	for(var layer := 0; layer < LAYER_COUNT; layer += 1;) {
		for(var x := 0; x < LAYER_SIZE; x += 1;) {
			var index := x + LAYER_START + (LAYER_SIZE * layer);
			getSprite(index).sprite.y -= 1;
		}
		if (getSprite(LAYER_START + (LAYER_SIZE * layer)).sprite.y < -15) {
			buildLayer(layer, LAYER_COUNT * 8 * 16);
		}
	}
}

func resetGame() {
	gridPrint( 1, 1, "CRABFALL! ");
	score     := 1;
	alive     := true;
	spriteInit(CRAB, S32x32, 0, 160, 100);
	for(var layer := 0; layer < LAYER_COUNT; layer += 1;) {
		buildLayer(layer, layer * 8 * 16 + 200);
	}
}

func main() {

	CL := 0xFF53DCD4;
	ST := &crabTiles;
	GT := &gridTiles;
	GP := &background;
	gridMask := GRID_Z_MASK;

	resetGame();

	while(true) {
		sync;

		if (alive) {
			crabLogic();
			levelLogic();
			gridPrint(29, 1, "         ");
			gridPrintNum(38, 1, score);
		}
		else {
			if (keys()) { resetGame(); }
		}
	}
}